def celsius_to_fahrenheit(celsius):
  return (celsius * 9/5) + 32

def celsius_to_kelvin(celsius):
  return celsius + 273.15

def fahrenheit_to_celsius(fahrenheit):
  return (fahrenheit - 32) * 5/9

def fahrenheit_to_kelvin(fahrenheit):
  return (fahrenheit + 459.67) * 5/9

def kelvin_to_celsius(kelvin):
  return kelvin - 273.15

def kelvin_to_fahrenheit(kelvin):
  return (kelvin * 9/5) - 459.67

def main():
  temperature = float(input("Enter temperature value: "))
  unit = input("Enter unit (C for Celsius, F for Fahrenheit, K for Kelvin): ").upper()

  if unit == "C":
    fahrenheit = celsius_to_fahrenheit(temperature)
    kelvin = celsius_to_kelvin(temperature)
    print(f"{temperature} degrees Celsius is equal to:")
    print(f"{fahrenheit:.2f} degrees Fahrenheit")
    print(f"{kelvin:.2f} Kelvin")
  elif unit == "F":
    celsius = fahrenheit_to_celsius(temperature)
    kelvin = fahrenheit_to_kelvin(temperature)
    print(f"{temperature} degrees Fahrenheit is equal to:")
    print(f"{celsius:.2f} degrees Celsius")
    print(f"{kelvin:.2f} Kelvin")
  elif unit == "K":
    celsius = kelvin_to_celsius(temperature)
    fahrenheit = kelvin_to_fahrenheit(temperature)
    print(f"{temperature} Kelvin is equal to:")
    print(f"{celsius:.2f} degrees Celsius")
    print(f"{fahrenheit:.2f} degrees Fahrenheit")
  else:
    print("Invalid unit entered.")

if __name__ == "__main__":
  main()



import requests  
from bs4 import BeautifulSoup  
import pandas as pd  

# URL of the e-commerce website (replace with the actual URL)  
url = 'https://example.com/products'  

# Send a GET request to the website  
response = requests.get(url)  

# Parse the HTML content  
soup = BeautifulSoup(response.text, 'html.parser')  

# Lists to store the scraped data  
product_names = []  
product_prices = []  
product_ratings = []  

# Find the product elements (update the selectors based on the website's structure)  
for product in soup.find_all('div', class_='product'):  
    name = product.find('h2', class_='product-name').text  
    price = product.find('span', class_='product-price').text  
    rating = product.find('span', class_='product-rating').text  
    
    product_names.append(name)  
    product_prices.append(price)  
    product_ratings.append(rating)  

# Create a DataFrame  
data = {  
    'Name': product_names,  
    'Price': product_prices,  
    'Rating': product_ratings  
}  
df = pd.DataFrame(data)  

# Save to CSV  
df.to_csv('products.csv', index=False)  

print("Data has been scraped and saved to products.csv")


import random

def number_guessing_game():
    target_number = random.randint(1, 100)
    attempts = 0
    guessed = False

    print("Welcome to the Number Guessing Game!")
    print("I've selected a number between 1 and 100. Try to guess it!")

    while not guessed:
        try:
            guess = int(input("Enter your guess: "))
            attempts += 1

            if guess < target_number:
                print("Your guess is too low. Try again!")
            elif guess > target_number:
                print("Your guess is too high. Try again!")
            else:
                guessed = True
                print(f"Well done! You've guessed the number {target_number} correctly in {attempts} attempts.")
        except ValueError:
            print("Invalid input. Please enter an integer.")

# Start the game
number_guessing_game()






import json

# File to store contacts
CONTACTS_FILE = "contacts.json"

# Load contacts from file
def load_contacts():
    try:
        with open(CONTACTS_FILE, "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []


# Save contacts to file
def save_contacts(contacts):
    with open(CONTACTS_FILE, "w") as file:
        json.dump(contacts, file)

# Add a new contact
def add_contact(contacts):
    name = input("Enter contact name: ")
    phone = input("Enter contact phone number: ")
    email = input("Enter contact email address: ")
    contacts.append({"name": name, "phone": phone, "email": email})
    save_contacts(contacts)
    print("Contact added successfully.")

# View all contacts
def view_contacts(contacts):
    if not contacts:
        print("No contacts available.")
        return
    for contact in contacts:
        print(f"Name: {contact['name']}, Phone: {contact['phone']}, Email: {contact['email']}")

# Edit an existing contact
def edit_contact(contacts):
    view_contacts(contacts)
    try:
        index = int(input("Enter the contact number to edit: ")) - 1
        if 0 <= index < len(contacts):
            contact = contacts[index]
            contact['name'] = input(f"Enter new name (current: {contact['name']}): ") 
            contact['phone'] = input(f"Enter new phone (current: {contact['phone']}): ") 
            contact['email'] = input(f"Enter new email (current: {contact['email']}): ") 
            save_contacts(contacts)
            print("Contact updated successfully.")
        else:
            print("Invalid contact number.")
    except ValueError:
        print("Invalid input. Please enter a valid number.")

# Delete a contact
def delete_contact(contacts):
    view_contacts(contacts)
    try:
        index = int(input("Enter the contact number to delete: ")) - 1
        if 0 <= index < len(contacts):
            contacts.pop(index)
            save_contacts(contacts)
            print("Contact deleted successfully.")
        else:
            print("Invalid contact number.")
    except ValueError:
        print("Invalid input. Please enter a valid number.")

# Main menu
def main():
    contacts = load_contacts()

    while True:
        print("\nContact Manager")
        print("1. Add Contact")
        print("2. View Contacts")
        print("3. Edit Contact")
        print("4. Delete Contact")
        print("5. Exit")

        choice = input("Enter your choice: ")
        if choice == '1':
            add_contact(contacts)
        elif choice == '2':
            view_contacts(contacts)
        elif choice == '3':
            edit_contact(contacts)
        elif choice == '4':
            delete_contact(contacts)
        elif choice == '5':
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()


def print_board(board):
    for row in board:
        print(" ".join(str(num) for num in row))

def is_valid(board, row, col, num):
    # Check if the number is already in the row
    if num in board[row]:
        return False
    
    # Check if the number is already in the column
    if num in [board[i][col] for i in range(9)]:
        return False
    
    # Check if the number is in the 3x3 subgrid
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(start_row, start_row + 3):
        for j in range(start_col, start_col + 3):
            if board[i][j] == num:
                return False
    
    return True

def solve_sudoku(board):
    empty = find_empty(board)
    if not empty:
        return True  # Puzzle solved

    row, col = empty
    for num in range(1, 10):
        if is_valid(board, row, col, num):
            board[row][col] = num

            if solve_sudoku(board):
                return True

            board[row][col] = 0  # Backtrack

    return False

def find_empty(board):
    for i in range(9):
        for j in range(9):
            if board[i][j] == 0:
                return (i, j)  # Return empty cell position

    return None

# Example unsolved Sudoku puzzle (0 represents empty cells)
unsolved_board = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

if solve_sudoku(unsolved_board):
    print("Sudoku puzzle solved:")
    print_board(unsolved_board)
else:
    print("No solution exists for the given Sudoku puzzle.")

